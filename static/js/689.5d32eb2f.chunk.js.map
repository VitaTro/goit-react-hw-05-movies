{"version":3,"file":"static/js/689.5d32eb2f.chunk.js","mappings":"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","sources":["components/Api.jsx","webpack://react-homework-template/./src/components/SearchBar/SearchBar.module.css?35a0","components/SearchBar/SearchBar.jsx","webpack://react-homework-template/./src/pages/Movies/Movies.module.css?82ee","pages/Movies/Movies.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst APIKEY = 'e41d1e074713eb19259eb796492b59d1';\n\n// повернення популярних фільмів\nexport const fetchTrendingMovies = async () => {\n  const target = `https://api.themoviedb.org/3/trending/movie/day?api_key=${APIKEY}`;\n  const response = await axios.get(target);\n  // цей вираз повертає частину даних, а саме результати пошуку.\n  // корисний, коли я шукаю фільм за запитом\n  // в даному випадку цей вираз повертає популярні фільми\n  return response.data.results;\n};\n\n// повернення фільмів за пошуком\nexport const fetchSearchQuery = async query => {\n  const target = `https://api.themoviedb.org/3/search/movie?api_key=${APIKEY}&query=${query}&include_adult=false&language=en-US&page=1`;\n  const response = await axios.get(target);\n  // цей вираз повертає частину даних, а саме результати пошуку.\n  // корисний, коли я шукаю фільм за запитом\n  return response.data.results;\n};\n\n//   повернення деталей про вибраний фільм\nexport const fetchDetailsMovie = async id => {\n  const target = `https://api.themoviedb.org/3/movie/${id}?api_key=${APIKEY}&language=en-US`;\n  const response = await axios.get(target);\n  // вираз повертає ВСІ дані, які я отримала з API.\n  // корисно, коли треба отримати загальне інфо про фільм\n  // (заголовок, опис, рік випуску, рейтинг ітд)\n  return response.data;\n};\n\n// повернення груп акторів, які грали у вибраному фільмі\nexport const fetchCastMovie = async id => {\n  const target = `https://api.themoviedb.org/3/movie/${id}/credits?api_key=${APIKEY}&language=en-US`;\n\n  const response = await axios.get(target);\n  // цей вираз повертає ЛИШЕ частину даних,\n  // в даному випадку тільки групу акторів, які грали у\n  // вибраному фільмі\n  return response.data.cast;\n};\n\n//   повернення рецензії вибраного фільму\nexport const fetchReviewsMovie = async id => {\n  const target = `https://api.themoviedb.org/3/movie/${id}/reviews?api_key=${APIKEY}&language=en-US&page=1`;\n  const response = await axios.get(target);\n  // вираз повертає ВСІ дані, які я отримала з API.\n  // корисно, коли треба отримати загальне інфо про фільм\n  // (заголовок, опис, рік випуску, рейтинг ітд)\n  return response.data.results;\n};\nconst Api = {\n  fetchTrendingMovies,\n  fetchSearchQuery,\n  fetchDetailsMovie,\n  fetchCastMovie,\n  fetchReviewsMovie,\n};\n\nexport default Api;\n","// extracted by mini-css-extract-plugin\nexport default {\"button\":\"SearchBar_button__T7RTc\",\"input\":\"SearchBar_input__bIy50\"};","import PropTypes from 'prop-types';\nimport css from './SearchBar.module.css';\n\nconst SearchBar = props => {\n  const handleSubmit = e => {\n    e.preventDefault();\n    //   const form = e.currentTarget;\n    const query = e.target.query.value;\n    props.onSubmit(query);\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        className={css.input}\n        name=\"query\"\n        type=\"text\"\n        autoComplete=\"off\"\n        autoFocus\n        placeholder=\"Search movie\"\n      />\n      <button type=\"submit\" className={css.button}>\n        Search\n      </button>\n    </form>\n  );\n};\n\nSearchBar.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\nexport default SearchBar;\n","// extracted by mini-css-extract-plugin\nexport default {\"nothing\":\"Movies_nothing__RCZEh\"};","import { fetchSearchQuery } from 'components/Api';\nimport SearchBar from 'components/SearchBar/SearchBar';\nimport { useEffect, useState } from 'react';\nimport { Link, useSearchParams } from 'react-router-dom';\nimport css from './Movies.module.css';\n\nconst Movies = () => {\n  const [movies, setMovies] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [loading, setLoading] = useState(false);\n\n  const actualQuery = searchParams.get('query'); // тут треба було додати .get('query') і тоді з'явились фільми по пошуку\n\n  const showFetchedSearchMovies = async query => {\n    setLoading(true);\n    try {\n      const fetchedSearchQuery = await fetchSearchQuery(query);\n      setMovies([...fetchedSearchQuery]);\n    } catch (error) {\n      console.log(error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    setMovies([]);\n    if (actualQuery) {\n      showFetchedSearchMovies(actualQuery);\n    }\n  }, [actualQuery]);\n\n  return (\n    <>\n      <SearchBar onSubmit={e => setSearchParams({ query: e })}></SearchBar>\n      {loading && <div>Loading...</div>}\n      {movies.length > 0 ? (\n        <ul>\n          {movies.map(movie => {\n            return (\n              <li key={movie.id}>\n                <Link\n                  to={`${movie.id}`}\n                  state={{ from: `/movies/?${searchParams}` }}\n                >\n                  {movie.title}\n                </Link>\n              </li>\n            );\n          })}\n        </ul>\n      ) : (\n        actualQuery &&\n        !loading && <div className={css.nothing}>Nothing found. Try again.</div>\n      )}\n    </>\n  );\n};\n\nexport default Movies;\n"],"names":["APIKEY","fetchTrendingMovies","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","target","response","_context","prev","next","concat","axios","sent","abrupt","data","results","stop","apply","arguments","fetchSearchQuery","_ref2","_callee2","query","_context2","_x","fetchDetailsMovie","_ref3","_callee3","id","_context3","_x2","fetchCastMovie","_ref4","_callee4","_context4","cast","_x3","fetchReviewsMovie","_ref5","_callee5","_context5","_x4","props","_jsxs","onSubmit","e","preventDefault","value","children","_jsx","className","css","name","type","autoComplete","autoFocus","placeholder","_useState","useState","_useState2","_slicedToArray","movies","setMovies","_useSearchParams","useSearchParams","_useSearchParams2","searchParams","setSearchParams","_useState3","_useState4","loading","setLoading","actualQuery","get","showFetchedSearchMovies","fetchedSearchQuery","_toConsumableArray","t0","console","log","finish","useEffect","_Fragment","SearchBar","length","map","movie","Link","to","state","from","title"],"sourceRoot":""}