{"version":3,"file":"static/js/81.da6cd64c.chunk.js","mappings":"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","sources":["components/Api.jsx","components/SearchBar/SearchBar.styled.jsx","components/SearchBar/SearchBar.jsx","pages/Movies/Movies.styled.jsx","pages/Movies/Movies.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst APIKEY = 'e41d1e074713eb19259eb796492b59d1';\n\n// повернення популярних фільмів\nexport const fetchTrendingMovies = async () => {\n  const target = `https://api.themoviedb.org/3/trending/movie/day?api_key=${APIKEY}`;\n  const response = await axios.get(target);\n  // цей вираз повертає частину даних, а саме результати пошуку.\n  // корисний, коли я шукаю фільм за запитом\n  // в даному випадку цей вираз повертає популярні фільми\n  return response.data.results;\n};\n\n// повернення фільмів за пошуком\nexport const fetchSearchQuery = async query => {\n  const target = `https://api.themoviedb.org/3/search/movie?api_key=${APIKEY}&query=${query}&include_adult=false&language=en-US&page=1`;\n  const response = await axios.get(target);\n  // цей вираз повертає частину даних, а саме результати пошуку.\n  // корисний, коли я шукаю фільм за запитом\n  return response.data.results;\n};\n\n//   повернення деталей про вибраний фільм\nexport const fetchDetailsMovie = async id => {\n  const target = `https://api.themoviedb.org/3/movie/${id}?api_key=${APIKEY}&language=en-US`;\n  const response = await axios.get(target);\n  // вираз повертає ВСІ дані, які я отримала з API.\n  // корисно, коли треба отримати загальне інфо про фільм\n  // (заголовок, опис, рік випуску, рейтинг ітд)\n  return response.data;\n};\n\n// повернення груп акторів, які грали у вибраному фільмі\nexport const fetchCastMovie = async id => {\n  const target = `https://api.themoviedb.org/3/movie/${id}/credits?api_key=${APIKEY}&language=en-US`;\n\n  const response = await axios.get(target);\n  // цей вираз повертає ЛИШЕ частину даних,\n  // в даному випадку тільки групу акторів, які грали у\n  // вибраному фільмі\n  return response.data.cast;\n};\n\n//   повернення рецензії вибраного фільму\nexport const fetchReviewsMovie = async id => {\n  const target = `https://api.themoviedb.org/3/movie/${id}/reviews?api_key=${APIKEY}&language=en-US&page=1`;\n  const response = await axios.get(target);\n  // вираз повертає ВСІ дані, які я отримала з API.\n  // корисно, коли треба отримати загальне інфо про фільм\n  // (заголовок, опис, рік випуску, рейтинг ітд)\n  return response.data.results;\n};\nconst Api = {\n  fetchTrendingMovies,\n  fetchSearchQuery,\n  fetchDetailsMovie,\n  fetchCastMovie,\n  fetchReviewsMovie,\n};\n\nexport default Api;\n","import styled from 'styled-components';\n\nexport const Form = styled.form`\n  margin-top: 40px;\n  margin-left: 80px;\n`;\n\nexport const Input = styled.input`\n  font-size: 25px;\n  color: gray;\n  width: 500px;\n`;\nexport const Button = styled.button`\n  background-color: #e0e0e070;\n  border: 3px solid gray;\n  border-radius: 7px;\n  font-size: 25px;\n  color: white;\n  text-decoration: none;\n  margin-left: 30px;\n`;\n","import PropTypes from 'prop-types';\n\nimport { Button, Form, Input } from './SearchBar.styled';\nconst SearchBar = props => {\n  const handleSubmit = e => {\n    e.preventDefault();\n    //   const form = e.currentTarget;\n    const query = e.target.query.value;\n    props.onSubmit(query);\n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <Input\n        name=\"query\"\n        type=\"text\"\n        autoComplete=\"off\"\n        autoFocus\n        placeholder=\"Search movie\"\n      />\n      <Button type=\"submit\">Search</Button>\n    </Form>\n  );\n};\n\nSearchBar.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\nexport default SearchBar;\n","import styled from 'styled-components';\nexport const Container = styled.div`\n\n  font-size: 25px;\n  color: #F2EB9A;\n  font-weight: 600;\n  text-align: center;\n  padding-bottom: 10px;\n  margin-top: 15px;\n  }\n`;\nexport const Title = styled.h2`\n  font-size: 44px;\n  margin: 0 auto;\n  text-align: center;\n  padding: 25px;\n  color: lightgrey;\n  text-shadow: 0 0 5px rgb(67, 182, 208);\n`;\n\nexport const List = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  align-items: center;\n  gap: 50px;\n  max-width: 1280px;\n`;\nexport const Item = styled.li`\n  width: 340px;\n\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  transition: all 0.2s ease-in-out;\n  &:hover {\n    transform: scale(1.1);\n  }\n`;\nexport const Image = styled.img`\n  max-height: 480px;\n  border-radius: 15px;\n`;\n","import { fetchSearchQuery } from 'components/Api';\nimport SearchBar from 'components/SearchBar/SearchBar';\nimport { useEffect, useState } from 'react';\nimport { Link, useSearchParams } from 'react-router-dom';\nimport { Container, Image, Item, List, Title } from './Movies.styled';\n\nconst Movies = () => {\n  const [movies, setMovies] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [loading, setLoading] = useState(false);\n\n  const actualQuery = searchParams.get('query'); // тут треба було додати .get('query') і тоді з'явились фільми по пошуку\n  const defaultImg =\n    'https://lascrucesfilmfest.com/wp-content/uploads/2018/01/no-poster-available.jpg';\n  const showFetchedSearchMovies = async query => {\n    setLoading(true);\n    try {\n      const fetchedSearchQuery = await fetchSearchQuery(query);\n      setMovies([...fetchedSearchQuery]);\n    } catch (error) {\n      console.log(error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    setMovies([]);\n    if (actualQuery) {\n      showFetchedSearchMovies(actualQuery);\n    }\n  }, [actualQuery]);\n\n  return (\n    <Container>\n      <SearchBar onSubmit={e => setSearchParams({ query: e })}></SearchBar>\n      <Title>{movies.length > 0 ? 'Search result:' : null}</Title>\n      {loading && <div>Loading...</div>}\n      {movies.length > 0 ? (\n        <List>\n          {movies.map(movie => {\n            return (\n              <Item key={movie.id}>\n                <Link\n                  to={`${movie.id}`}\n                  state={{ from: `/movies/?${searchParams}` }}\n                >\n                  <Image\n                    src={\n                      movie.poster_path\n                        ? `https://image.tmdb.org/t/p/w500/${movie.poster_path}`\n                        : defaultImg\n                    }\n                    alt={movie.title}\n                  />\n                  {movie.title}\n                </Link>\n              </Item>\n            );\n          })}\n        </List>\n      ) : (\n        actualQuery && !loading && <div>Nothing found. Try again.</div>\n      )}\n    </Container>\n  );\n};\n\nexport default Movies;\n"],"names":["APIKEY","fetchTrendingMovies","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","target","response","_context","prev","next","concat","axios","sent","abrupt","data","results","stop","apply","arguments","fetchSearchQuery","_ref2","_callee2","query","_context2","_x","fetchDetailsMovie","_ref3","_callee3","id","_context3","_x2","fetchCastMovie","_ref4","_callee4","_context4","cast","_x3","fetchReviewsMovie","_ref5","_callee5","_context5","_x4","Form","styled","_templateObject","_taggedTemplateLiteral","Input","_templateObject2","Button","_templateObject3","props","_jsxs","onSubmit","e","preventDefault","value","children","_jsx","name","type","autoComplete","autoFocus","placeholder","Container","Title","List","Item","_templateObject4","Image","_templateObject5","_useState","useState","_useState2","_slicedToArray","movies","setMovies","_useSearchParams","useSearchParams","_useSearchParams2","searchParams","setSearchParams","_useState3","_useState4","loading","setLoading","actualQuery","get","showFetchedSearchMovies","fetchedSearchQuery","_toConsumableArray","t0","console","log","finish","useEffect","SearchBar","length","map","movie","Link","to","state","from","src","poster_path","alt","title"],"sourceRoot":""}